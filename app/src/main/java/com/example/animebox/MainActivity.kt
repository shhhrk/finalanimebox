package com.example.animebox

import android.content.Context
import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.border
import androidx.compose.ui.draw.clip
import androidx.compose.foundation.shape.CircleShape
import com.example.animebox.data.AppDatabase
import com.example.animebox.data.CharacterEntity
import com.example.animebox.data.CrystalsEntity
import com.example.animebox.domain.model.Character
import com.example.animebox.ui.components.AdDialog
import com.example.animebox.ui.components.CharacterDialog
import com.example.animebox.ui.theme.AnimeBoxTheme
import com.example.animebox.ui.theme.Mint
import kotlinx.coroutines.launch
import kotlin.random.Random
import androidx.hilt.navigation.compose.hiltViewModel
import com.example.animebox.ui.anime.AnimeScreen
import com.example.animebox.ui.anime.AnimeViewModel
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import dagger.hilt.android.AndroidEntryPoint
import javax.inject.Inject
import androidx.compose.ui.platform.testTag

@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    @Inject
    lateinit var db: AppDatabase

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val prefs = getSharedPreferences("AppSettings", Context.MODE_PRIVATE)
        val isDarkTheme = prefs.getBoolean("DARK_THEME", false)
        
        setContent {
            AnimeBoxTheme(darkTheme = isDarkTheme) {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    val navController = rememberNavController()
                    NavHost(
                        navController = navController,
                        startDestination = "menu"
                    ) {
                        composable("menu") {
                            MenuScreen(db, isDarkTheme, navController)
                        }
                        composable("anime_api") {
                            AnimeApiScreen(navController)
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun MenuScreen(db: AppDatabase, isDarkTheme: Boolean, navController: NavHostController) {
    var crystals by remember { mutableStateOf(0) }
    var showCharacterDialog by remember { mutableStateOf<Character?>(null) }
    var showAdDialog by remember { mutableStateOf(false) }
    var isAdButtonEnabled by remember { mutableStateOf(true) }
    var showAnimeScreen by remember { mutableStateOf(false) }
    val context = LocalContext.current
    val scope = rememberCoroutineScope()

    LaunchedEffect(Unit) {
        crystals = db.crystalsDao().getCrystals()?.amount ?: 0
    }

    val narutoCharacters = listOf(
        Character("–•–∏–Ω–∞—Ç–∞", "–û–±—ã—á–Ω–∞—è", R.drawable.hinata),
        Character("–¶—É–Ω–∞–¥—ç", "–û–±—ã—á–Ω–∞—è", R.drawable.tsunade),
        Character("–°–∞–∫—É—Ä–∞", "–†–µ–¥–∫–∞—è", R.drawable.sakura),
        Character("–†–∏–Ω", "–†–µ–¥–∫–∞—è", R.drawable.rin),
        Character("–ö—É—à–∏–Ω–∞", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", R.drawable.kushina)
    )
    val kaguyaCharacters = listOf(
        Character("–ö–∞–≥—É—è", "–û–±—ã—á–Ω–∞—è", R.drawable.kaguya),
        Character("–ú–∏–∫–æ", "–û–±—ã—á–Ω–∞—è", R.drawable.miko),
        Character("–ß–∏–∫–∞", "–†–µ–¥–∫–∞—è", R.drawable.chika),
        Character("–ù–∞–≥–∏—Å–∞", "–†–µ–¥–∫–∞—è", R.drawable.nagisa),
        Character("–ê–π", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", R.drawable.ai)
    )
    val chainsawmanCharacters = listOf(
        Character("–•–∏–º–µ–Ω–æ", "–û–±—ã—á–Ω–∞—è", R.drawable.himeno),
        Character("–ö–æ–±–µ–Ω–∏", "–û–±—ã—á–Ω–∞—è", R.drawable.kobeni),
        Character("–ü–∞—É—ç—Ä", "–†–µ–¥–∫–∞—è", R.drawable.power),
        Character("–ü–æ—á–∏—Ç–∞", "–†–µ–¥–∫–∞—è", R.drawable.pochita),
        Character("–ú–∞–∫–∏–º–∞", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", R.drawable.makima)
    )
    val bocchitherockerCharacters = listOf(
        Character("–ö–∏—Ç–∞", "–û–±—ã—á–Ω–∞—è", R.drawable.kita),
        Character("–†—ë", "–û–±—ã—á–Ω–∞—è", R.drawable.ryo),
        Character("–•–∏—Ç–æ—Ä–∏", "–†–µ–¥–∫–∞—è", R.drawable.hitori),
        Character("–ü–∞-–°–∞–Ω", "–†–µ–¥–∫–∞—è", R.drawable.pasan),
        Character("–ö–∏–∫—É—Ä–∏", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", R.drawable.kikuri)
    )
    val jojoCharacters = listOf(
        Character("–î–∂–æ—Ç–∞—Ä–æ", "–û–±—ã—á–Ω–∞—è", R.drawable.jotaro),
        Character("–¶–µ–∑–∞—Ä—å", "–û–±—ã—á–Ω–∞—è", R.drawable.caesar),
        Character("–î–∂–æ—Å–∫–µ", "–†–µ–¥–∫–∞—è", R.drawable.joske),
        Character("–î–∏–æ", "–†–µ–¥–∫–∞—è", R.drawable.dio),
        Character("–°–ø–∏–¥–≤–∞–≥–æ–Ω", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", R.drawable.speedwagon)
    )
    val windbreakerCharacters = listOf(
        Character("–•–∞—è—Ç–æ", "–û–±—ã—á–Ω–∞—è", R.drawable.hayato),
        Character("–ö–æ—Ç–æ—Ö–∞", "–û–±—ã—á–Ω–∞—è", R.drawable.kotoha),
        Character("–¢–æ–≥–∞–º–µ", "–†–µ–¥–∫–∞—è", R.drawable.togame),
        Character("–£–º–µ–º–∏—è", "–†–µ–¥–∫–∞—è", R.drawable.umemiya),
        Character("–ö–∏—Ä–∏—é", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", R.drawable.kiry)
    )
    val dungeonmeshiCharacters = listOf(
        Character("–§–∞–ª–∏–Ω", "–û–±—ã—á–Ω–∞—è", R.drawable.falin),
        Character("–°–µ–Ω—à–∏", "–û–±—ã—á–Ω–∞—è", R.drawable.senshi),
        Character("–ò–Ω—É—Ç–∞–¥–µ", "–†–µ–¥–∫–∞—è", R.drawable.inutade),
        Character("–ò–∑—É—Ç—Å—É–º–∏", "–†–µ–¥–∫–∞—è", R.drawable.izutsumi),
        Character("–ú–∞—Ä—Å–∏–ª—å", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", R.drawable.marcille)
    )

    fun openAnimeBox(characters: List<Character>) {
        if (crystals >= 50) {
            crystals -= 50
            scope.launch {
                db.crystalsDao().setCrystals(CrystalsEntity(amount = crystals))
                val random = Random.nextInt(1000)
                val obtainedCharacter = when {
                    random < 350 -> characters[0] // –æ–±—ã—á–Ω—ã–π 1
                    random < 700 -> characters[1] // –æ–±—ã—á–Ω—ã–π 2
                    random < 825 -> characters[2] // —Ä–µ–¥–∫–∏–π 1
                    random < 950 -> characters[3] // —Ä–µ–¥–∫–∏–π 2
                    else -> characters[4] // –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π
                }
                showCharacterDialog = obtainedCharacter
            }
        } else {
            Toast.makeText(context, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!", Toast.LENGTH_SHORT).show()
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background)
    ) {
        Image(
            painter = painterResource(id = if (isDarkTheme) R.drawable.darkwallpaper else R.drawable.lightwallpaper),
            contentDescription = null,
            modifier = Modifier
                .fillMaxSize()
                .graphicsLayer(alpha = if (isDarkTheme) 0.6f else 1f),
            contentScale = ContentScale.Crop
        )
        if (isDarkTheme) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color(0x80000000))
            )
        }

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "–ö—Ä–∏—Å—Ç–∞–ª–ª—ã: $crystalsüíé",
                    fontSize = 24.sp,
                    color = Color.White
                )
                
                IconButton(
                    onClick = {
                        context.startActivity(
                            android.content.Intent(context, com.example.animebox.ui.settings.SettingsActivity::class.java)
                        )
                    }
                ) {
                    Icon(
                        painter = painterResource(id = android.R.drawable.ic_menu_manage),
                        contentDescription = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                        tint = Color.White
                    )
                }
            }

            Spacer(modifier = Modifier.height(20.dp))

            Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {
                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {
                    LootboxCard(imageRes = R.drawable.naruto, title = "–ù–∞—Ä—É—Ç–æ", onClick = { openAnimeBox(narutoCharacters) })
                    LootboxCard(imageRes = R.drawable.loveiswar, title = "–ö–∞–≥—É—è —Ö–æ—á–µ—Ç –≤–ª—é–±–∏—Ç—å—Å—è", onClick = { openAnimeBox(kaguyaCharacters) })
                }
                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {
                    LootboxCard(imageRes = R.drawable.chainsawman, title = "–ß–µ–ª–æ–≤–µ–∫-–±–µ–Ω–∑–æ–ø–∏–ª–∞", onClick = { openAnimeBox(chainsawmanCharacters) })
                    LootboxCard(imageRes = R.drawable.bocchitherocker, title = "–¢–∏—Ö–æ–Ω—è-—Ä–æ–∫–µ—Ä", onClick = { openAnimeBox(bocchitherockerCharacters) })
                }
                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {
                    LootboxCard(imageRes = R.drawable.jojo, title = "–î–∂–æ–¥–∂–æ", onClick = { openAnimeBox(jojoCharacters) })
                    LootboxCard(imageRes = R.drawable.windbreaker, title = "–í–µ—Ç—Ä–æ–ª–æ–º", onClick = { openAnimeBox(windbreakerCharacters) })
                }
                Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {
                    LootboxCard(imageRes = R.drawable.dungeonmeshi, title = "–ü–æ–¥–∑–µ–º–µ–ª—å—è –≤–∫—É—Å–Ω–æ—Å—Ç–µ–π", onClick = { openAnimeBox(dungeonmeshiCharacters) })
                }
            }

            Spacer(modifier = Modifier.weight(1f))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly,
                verticalAlignment = Alignment.CenterVertically
            ) {
                IconButton(
                    onClick = { navController.navigate("anime_api") },
                    modifier = Modifier.size(82.dp).testTag("api_button"),
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.apibut),
                        contentDescription = "–ê–Ω–∏–º–µ –æ–Ω–ª–∞–π–Ω (API)",
                        modifier = Modifier.size(82.dp),
                        contentScale = ContentScale.Crop
                    )
                }
                Spacer(modifier = Modifier.width(32.dp))
                Box(
                    modifier = Modifier
                        .size(82.dp)
                        .clip(CircleShape)
                        .border(width = 3.dp, color = Color(0xFFCCCCCC), shape = CircleShape)
                        .clickable {
                            context.startActivity(
                                android.content.Intent(context, com.example.animebox.ui.collection.CollectionActivity::class.java)
                            )
                        },
                    contentAlignment = Alignment.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.q),
                        contentDescription = "–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π",
                        modifier = Modifier
                            .fillMaxSize(),
                        contentScale = ContentScale.Crop
                    )
                }
            }

            val adButtonModifier = if (isAdButtonEnabled) {
                Modifier
                    .width(140.dp)
                    .height(44.dp)
                    .clickable {
                        isAdButtonEnabled = false
                        showAdDialog = true
                    }
            } else {
                Modifier
                    .width(140.dp)
                    .height(44.dp)
            }
            Box(
                modifier = adButtonModifier
                    .align(Alignment.CenterHorizontally)
                    .background(
                        color = Color(0xE6FFFFFF),
                        shape = RoundedCornerShape(16.dp)
                    ),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = "–†–µ–∫–ª–∞–º–∞",
                    textAlign = TextAlign.Center,
                    color = Color.DarkGray,
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Medium
                )
            }
        }
        showCharacterDialog?.let { character ->
            CharacterDialog(
                character = character,
                onDismiss = { showCharacterDialog = null },
                onConfirm = {
                    scope.launch {
                        val exists = db.characterDao().getByNameAndRarity(character.name, character.rarity)
                        if (exists == null) {
                            db.characterDao().insert(
                                CharacterEntity(
                                    name = character.name,
                                    rarity = character.rarity,
                                    imagePath = character.imageRes.toString()
                                )
                            )
                        }
                    }
                }
            )
        }
        if (showAdDialog) {
            AdDialog(
                onDismiss = { 
                    showAdDialog = false
                    isAdButtonEnabled = true
                },
                onComplete = {
                    crystals += 3000
                    scope.launch {
                        db.crystalsDao().setCrystals(CrystalsEntity(amount = crystals))
                    }
                    Toast.makeText(context, "+3000 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤üíé!", Toast.LENGTH_SHORT).show()
                }
            )
        }
    }

    if (showAnimeScreen) {
        val viewModel: AnimeViewModel = hiltViewModel()
        LaunchedEffect(Unit) { viewModel.loadAnime() }
        Box(modifier = Modifier.fillMaxSize()) {
            AnimeScreen(viewModel = viewModel)
            Button(
                onClick = { showAnimeScreen = false },
                modifier = Modifier
                    .align(Alignment.TopStart)
                    .padding(16.dp)
                    .defaultMinSize(minWidth = 1.dp, minHeight = 1.dp)
            ) {
                Text("–ù–∞–∑–∞–¥")
            }
        }
    }
}

@Composable
fun AnimeApiScreen(navController: NavHostController) {
    val viewModel: AnimeViewModel = hiltViewModel()
    LaunchedEffect(Unit) { viewModel.loadAnime() }
    Column(modifier = Modifier.fillMaxSize()) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(8.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(onClick = { navController.popBackStack() }) {
                Icon(
                    painter = painterResource(id = android.R.drawable.ic_menu_revert),
                    contentDescription = "–ù–∞–∑–∞–¥",
                    tint = MaterialTheme.colorScheme.onBackground
                )
            }
            Spacer(modifier = Modifier.width(8.dp))
            Text(text = "–ê–Ω–∏–º–µ –æ–Ω–ª–∞–π–Ω (API)", style = MaterialTheme.typography.titleLarge)
        }
        AnimeScreen(viewModel = viewModel)
    }
}

@Composable
fun LootboxCard(imageRes: Int, title: String, onClick: () -> Unit) {
    val isDarkTheme = isSystemInDarkTheme()
    Column(
        modifier = Modifier
            .padding(6.dp)
            .width(110.dp)
            .clickable { onClick() },
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Box(
            modifier = Modifier
                .size(68.dp)
                .clip(RoundedCornerShape(12.dp))
                .background(MaterialTheme.colorScheme.surface)
                .border(1.dp, MaterialTheme.colorScheme.primary, RoundedCornerShape(12.dp)),
            contentAlignment = Alignment.Center
        ) {
            Image(
                painter = painterResource(id = imageRes),
                contentDescription = title,
                modifier = Modifier.size(60.dp),
                contentScale = ContentScale.Crop
            )
        }
        Spacer(modifier = Modifier.height(6.dp))
        Text(
            text = title,
            color = MaterialTheme.colorScheme.onSurface,
            fontSize = 13.sp,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            maxLines = 2
        )
    }
}